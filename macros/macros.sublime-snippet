<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>
	using namespace std;

	#define int long long
	#define main signed main

	// Used to print like python, and resets value of sep and end after printing.
	class _print { 
		string _sep=" ", _end="\n";
	public:
		_print& sep(string s=" ") {_sep = s; return *this;} 
		_print& end(string s="\n") {_end = s; return *this;}
		_print& set(string s1=" ", string s2="\n") {_sep = s1; _end = s2; return *this;};
		template <typename T> void operator()(T t) {cout << t; cout << _end; _sep=" "; _end="\n";}
		template<typename T, typename... Args> void operator()(T t, Args... args) {cout << t; cout << _sep; operator()(args...);}
	} print;

	ostream& operator<<(ostream& out, const std::basic_string<char> c) {for(auto x=c.begin(); x!=c.end(); x++) {out<<*x;}return out;} // to resolve ambiguity for strings in line below.
	template <template <class...> class TT, class ...T> ostream& operator<<(ostream& out, const TT<T...>& c) {out<<"[";for(auto x=c.begin(); x!=c.end(); x++) {out<<*x;auto y=x;y++; if(y!=c.end())out<<", ";}out << "]";return out;}
	template<typename T, std::size_t N> ostream& operator<<(ostream& out, const std::array<T, N>& c) {out<<"[";for(auto x=c.begin(); x!=c.end(); x++) {out<<*x;auto y=x;y++; if(y!=c.end())out<<", ";}out << "]";return out;}

	template<typename T, typename T2> vector<T>& operator+= (vector<T>& lhs, const T2& rhs) {lhs.push_back((T)rhs); return lhs;}
	template<typename T, typename T2> deque<T>& operator+= (deque<T>& lhs, const T2& rhs) {lhs.push_back((T)rhs); return lhs;}
	template<typename T, typename T2> set<T>& operator+= (set<T>& lhs, const T2& rhs) {lhs.insert((T)rhs); return lhs;}
	template<typename T, typename T2> multiset<T>& operator+= (multiset<T>& lhs, const T2& rhs) {lhs.insert((T)rhs); return lhs;}
	template<typename T, typename T2> unordered_set<T>& operator+= (unordered_set<T>& lhs, const T2& rhs) {lhs.insert((T)rhs); return lhs;}
	template<typename T, typename T2> unordered_multiset<T>& operator+= (unordered_multiset<T>& lhs, const T2& rhs) {lhs.insert((T)rhs); return lhs;}
	template<typename T, typename T2> stack<T>& operator+= (stack<T>& lhs, const T2& rhs) {lhs.push((T)rhs); return lhs;}
	template<typename T, typename T2> queue<T>& operator+= (queue<T>& lhs, const T2& rhs) {lhs.push((T)rhs); return lhs;}
	template<typename T, typename T2> priority_queue<T>& operator+= (priority_queue<T>& lhs, const T2& rhs) {lhs.push((T)rhs); return lhs;}

	template<typename T> vector<T>& operator-- (vector<T>& lhs, signed) {lhs.pop_back(); return lhs;}
	template<typename T> deque<T>& operator-- (deque<T>& lhs, signed) {lhs.pop_back(); return lhs;}
	template<typename T> deque<T>& operator-- (deque<T>& lhs) {lhs.pop_front(); return lhs;}
	template<typename T> stack<T>& operator-- (stack<T>& lhs, signed) {lhs.pop(); return lhs;}
	template<typename T> queue<T>& operator-- (queue<T>& lhs, signed) {lhs.pop(); return lhs;}
	template<typename T> priority_queue<T>& operator-- (priority_queue<T>& lhs, signed) {lhs.pop(); return lhs;}

	template<typename T, typename T2> set<T>& operator-= (set<T>& lhs, const T2& rhs) {lhs.erase((T)rhs); return lhs;}
	template<typename T, typename T2> multiset<T>& operator-= (multiset<T>& lhs, const T2& rhs) {lhs.erase((T)rhs); return lhs;}
	template<typename T, typename T2> unordered_set<T>& operator-= (unordered_set<T>& lhs, const T2& rhs) {lhs.erase((T)rhs); return lhs;}
	template<typename T, typename T2> unordered_multiset<T>& operator-= (unordered_multiset<T>& lhs, const T2& rhs) {lhs.erase((T)rhs); return lhs;}

	template<typename T2> bool operator== (T2& lhs, const int rhs) {if(rhs==0) return lhs.empty(); return (lhs.size() == rhs);}
	template<typename T2> bool operator!= (T2& lhs, const int rhs) {if(rhs==0) return !lhs.empty(); return (lhs.size() != rhs);}
	template<typename T2> T2 operator! (T2& lhs) {lhs.clear(); return lhs;}
// End of macros

main() {${1}
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>cpp</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
